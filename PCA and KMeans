
# 🧠 PCA + KMeans Clustering (Python | C | Java)

This project shows how to apply **PCA (Principal Component Analysis)** and **KMeans Clustering** in 3 languages:

- 🐍 Python (fully working with plot)
- 🧱 C (concept template)
- ☕ Java (concept template)

---

## 🔍 Simple Explanation

- **PCA** is used to reduce the number of features (dimensions) while keeping the important patterns.
- **KMeans** is used to group similar data points into clusters (unsupervised learning).

---

## 📁 Project Structure

```

📦 pca-kmeans
├── README.md
├── python/
│   └── pca\_kmeans.py
├── c/
│   └── pca\_kmeans.c
├── java/
│   └── PCAKMeans.java

````

---

## 🐍 Python Code — `python/pca_kmeans.py`

```python
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load Iris dataset
data = load_iris()
X = data.data

# Apply PCA to reduce data to 2 dimensions
pca = PCA(n_components=2)
reduced_X = pca.fit_transform(X)

# Apply KMeans with 3 clusters
kmeans = KMeans(n_clusters=3, random_state=42)
labels = kmeans.fit_predict(reduced_X)

# Plot the result
plt.scatter(reduced_X[:, 0], reduced_X[:, 1], c=labels, cmap='viridis')
plt.title("PCA + KMeans Clustering")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.grid(True)
plt.show()
````

---

## 🧱 C Code — `c/pca_kmeans.c`

```c
#include <stdio.h>

int main() {
    // Placeholder for PCA + KMeans in C
    printf("PCA and KMeans in C (concept)\n");

    // To implement:
    // - Read data from file
    // - Calculate mean, covariance matrix
    // - Do eigenvalue decomposition for PCA
    // - Perform KMeans (Euclidean distance, centroid update)

    return 0;
}
```

---

## ☕ Java Code — `java/PCAKMeans.java`

```java
public class PCAKMeans {
    public static void main(String[] args) {
        System.out.println("PCA + KMeans in Java (concept)");

        // Steps to implement:
        // 1. Read data from file/array
        // 2. Perform PCA (covariance matrix, eigen decomposition)
        // 3. Implement KMeans algorithm manually or use a library
    }
}
```

---

## ▶️ How to Run

### ✅ Python

```bash
cd python
python3 pca_kmeans.py
```

### ✅ C

```bash
cd c
gcc pca_kmeans.c -o pca_kmeans
./pca_kmeans
```

### ✅ Java

```bash
cd java
javac PCAKMeans.java
java PCAKMeans
```

---

## 🎨 Output

> 🐍 Python will show a 2D scatter plot with colored clusters.
> 🧱 C and ☕ Java are structure-only templates — you can implement logic step by step later.

---

## 🛠 Tools Used

| Language | Libraries Used        |
| -------- | --------------------- |
| Python   | sklearn, matplotlib   |
| C        | stdio.h               |
| Java     | java.io, core methods |

---

## 🔗 Connect with Me

* 👨‍💻 GitHub: [lokeshagarwal2304](https://github.com/lokeshagarwal2304)
* 🔗 LinkedIn: [lokeshagarwal2304](https://linkedin.com/in/lokeshagarwal2304)
* ✉️ Email: [lokeshagarwal2304@gmail.com](mailto:lokeshagarwal2304@gmail.com)

---

<p align="center"><b>Made with ❤️ by Lokesh Agarwal </b></p>

# ‚öôÔ∏è Rendering Techniques in Web Development ‚Äì SSR vs CSR vs SSG

> *Understand the core rendering strategies and when to use each for building modern web apps with speed, SEO, and performance in mind.*

---

## üìñ Concept Overview

Rendering defines **how your content is prepared and shown to the user** ‚Äî either on the server, the client, or ahead of time as static HTML. Below is a breakdown of the three most used methods:

---

## üìà Comparison Table

| Feature/Aspect             | SSR (Server-Side Rendering)                            | CSR (Client-Side Rendering)                       | SSG (Static Site Generation)                 |
| -------------------------- | ------------------------------------------------------ | ------------------------------------------------- | -------------------------------------------- |
| üìç Where rendering happens | Server (on every request)                              | Browser (after JS loads)                          | At build time (before deployment)            |
| üß† How it works            | Server builds the page HTML on every request           | Sends empty HTML, then loads JS & data on browser | Pre-builds HTML files for each page          |
| üöÄ Performance             | Slower initial load, but faster interaction            | Fast after JS loads, but poor initial performance | Very fast loading (no server involved)       |
| üåê SEO Friendly            | ‚úÖ Yes ‚Äì HTML is ready on first load                    | ‚ùå No ‚Äì bots may not wait for JS                   | ‚úÖ Yes ‚Äì pages are pre-rendered               |
| üóïÔ∏è When to use            | Dynamic content that changes per user (e.g. dashboard) | Web apps with lots of user interaction, SPAs      | Blogs, docs, landing pages, static content   |
| üîÅ Data freshness          | Fresh on every request                                 | Depends on API fetch timing                       | Stale unless rebuilt or revalidated          |
| üß∞ Examples                | Next.js with `getServerSideProps`                      | React app with REST or GraphQL                    | Next.js with `getStaticProps` + revalidation |

---

## üí° Use Cases

* **SSR:** eCommerce product pages, dashboards, dynamic search results
* **CSR:** Admin panels, interactive dashboards, private routes
* **SSG:** Blogs, portfolios, marketing pages, documentation

---

## üß™ Real-World Code Usage (Next.js)

```tsx
// ‚úÖ SSR in Next.js
export async function getServerSideProps(context) {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();
  return { props: { data } };
}
```

```tsx
// ‚úÖ SSG in Next.js
export async function getStaticProps() {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();
  return { props: { data }, revalidate: 60 }; // ISR
}
```

```tsx
// ‚úÖ CSR in React
useEffect(() => {
  fetch("/api/data").then(res => res.json()).then(setData);
}, []);
```

---

## üß† Pro Tip (Best of All Worlds)

Next.js lets you **mix & match**:

* Use **SSG** for static pages
* Use **SSR** for dynamic pages
* Use **CSR** for interactive components

This way, your app stays **fast, dynamic, and SEO-friendly**!

---

## üìå Summary

Choose your rendering strategy based on:

* **How often content updates**
* **Whether SEO is important**
* **What level of user interaction is needed**

---

> Made with ‚ù§Ô∏è by [Lokesh Agarwal](https://github.com/lokeshagarwal2304)

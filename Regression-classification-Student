
# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Sample student data
data = {
    'Hours_Studied': [2, 4, 6, 8, 10],
    'Attendance': [80, 85, 90, 95, 100],
    'Previous_Score': [50, 60, 65, 70, 80],
    'Final_Score': [55, 65, 70, 80, 90]
}

df = pd.DataFrame(data)

# Features and target
X = df[['Hours_Studied', 'Attendance', 'Previous_Score']]
y = df['Final_Score']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Predicted Scores:", y_pred)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))


##✅ This will **predict the final score of a student** based on hours studied, attendance, and previous scores.

---

If you want, I can also **show a version that converts regression into classification**, like predicting **grades (A, B, C)** from the scores using ML classification. That’s perfect if your target is categories instead of exact marks.

Do you want me to do that too?
